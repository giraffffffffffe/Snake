Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.image.BufferedImage;\nimport java.util.Scanner;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class Main extends JFrame implements ActionListener{\n    public Color BACKGROUND_COLOR = new Color(84,170,89); //colour that the background is\n    public Color WALL_COLOR = new Color(48, 13, 1); //colour that the walls are\n    public Color DOT_COLOR = new Color(26, 109, 85); //colour that the dots are\n    private final int UP = 2; // direction of the snake\n    private final int DOWN = -2; // direction of the snake\n    private final int RIGHT = 1; // direction of the snake\n    private final int LEFT = -1; // direction of the snake\n    private int points = 0; // points the player has\n    private final String[] MENU_NAMES = {\"Help\", \"Configure\", \"Actions\",\"points \"+points};\n    private final String[] MENU0_OPTIONS = {\"Instructions\"}; // options in Help menu\n    private final String[] MENU1_OPTIONS = {\"Keys\", \"Snake Speed\"}; // options in configure menu\n    private final String[] MENU2_OPTIONS = {\"Pause\"}; // options in actions menu\n    private final String[] MENU3_OPTIONS = {}; // options in actions menu\n    private final int PIXELS_PER_BOX = 10;\n    private int turnNumber = 0;\n    private int boardWidth = 50; // length of the board (in boxes)\n    private int boardHeight = 50; // height of the board (in boxes)\n    private int paneWidth = boardWidth*PIXELS_PER_BOX; // initial width of window\n    private int paneHeight = boardWidth*PIXELS_PER_BOX; // initial height of window\n    private final Box[][] BOARD = new Box[boardWidth][boardHeight]; // creates a 2D array of boxes\n    private int frameRate = 250; // speed of the game\n    private boolean justAte = false;\n    private int xOffset; // x offset of the board (for school, 8) (for home, 0)\n    private int yOffset; // y offset of the board (for school, 54) (for home, 49)\n    private boolean justTurned = false;\n    private final int INITIAL_SNAKE_LENGTH = 4;\n    private final int INITIAL_SNAKE_X = boardWidth/2-5;\n    private final int INITIAL_SNAKE_Y = boardHeight/2;\n    private boolean firstKeyPressed = true;\n    private final String APPLE_FILE = \"apple.png\";\n    private final String ORANGE_FILE = \"orange.png\";\n    private final String KIWIFRUIT_FILE = \"kiwifruit.png\";\n    private final String PLUM_FILE = \"plum.png\";\n    private final String U_SNAKE_HEAD_FILE = \"uSnakeHead.png\";\n    private final String D_SNAKE_HEAD_FILE = \"dSnakeHead.png\";\n    private final String L_SNAKE_HEAD_FILE = \"lSnakeHead.png\";\n    private final String R_SNAKE_HEAD_FILE = \"rSnakeHead.png\";\n    private final String U_SNAKE_TAIL_FILE= \"uSnakeTail.png\";\n    private final String D_SNAKE_TAIL_FILE= \"dSnakeTail.png\";\n    private final String L_SNAKE_TAIL_FILE= \"lSnakeTail.png\";\n    private final String R_SNAKE_TAIL_FILE= \"rSnakeTail.png\";\n    private final String RL_FILE = \"rl.png\";\n    private final String UD_FILE = \"ud.png\";\n    private final String UR_FILE = \"ur.png\";\n    private final String UL_FILE = \"ul.png\";\n    private final String DR_FILE = \"dr.png\";\n    private final String DL_FILE = \"dl.png\";\n    private final ImageIcon APPLE = new ImageIcon(APPLE_FILE);\n    private final ImageIcon ORANGE = new ImageIcon(ORANGE_FILE);\n    private final ImageIcon KIWIFRUIT = new ImageIcon(KIWIFRUIT_FILE);\n    private final ImageIcon PLUM = new ImageIcon(PLUM_FILE);\n    private final ImageIcon U_SNAKE_HEAD = new ImageIcon(U_SNAKE_HEAD_FILE);\n    private final ImageIcon D_SNAKE_HEAD = new ImageIcon(D_SNAKE_HEAD_FILE);\n    private final ImageIcon L_SNAKE_HEAD = new ImageIcon(L_SNAKE_HEAD_FILE);\n    private final ImageIcon R_SNAKE_HEAD = new ImageIcon(R_SNAKE_HEAD_FILE);\n    private final ImageIcon U_SNAKE_TAIL = new ImageIcon(U_SNAKE_TAIL_FILE);\n    private final ImageIcon D_SNAKE_TAIL = new ImageIcon(D_SNAKE_TAIL_FILE);\n    private final ImageIcon L_SNAKE_TAIL = new ImageIcon(L_SNAKE_TAIL_FILE);\n    private final ImageIcon R_SNAKE_TAIL = new ImageIcon(R_SNAKE_TAIL_FILE);\n    private final ImageIcon UD = new ImageIcon(UD_FILE);\n    private final ImageIcon UR = new ImageIcon(UR_FILE);\n    private final ImageIcon UL = new ImageIcon(UL_FILE);\n    private final ImageIcon DR = new ImageIcon(DR_FILE);\n    private final ImageIcon DL = new ImageIcon(DL_FILE);\n    private final ImageIcon RL = new ImageIcon(RL_FILE);;\n    private JMenuBar menuBar; // creates a menu bar\n    private JMenuItem menuItem; // creates a menu item\n    private Canvas myGraphic; // canvas that is used for the graphics\n    private JPanel panel = new JPanel(); // initialises JPanel\n    private Scanner kb = new Scanner(System.in); // initialises keyboard\n    private Fruit f = new Fruit(randomNumber(0,2), boardWidth/2, boardHeight/2); // initialises fruit\n    public Snake s; // initialises Snake\n    public static void main(String[] args) { // starts program\n        Main m = new Main();\n    }\n\n    public Main(){ // runs initially\n        for(int i = 0; i <boardWidth; i++){ // for each box in the board\n            for(int j = 0; j < boardHeight; j++){\n                BOARD[i][j] = new Box(); // creates a new box\n                if (i == 0 || i == boardWidth-1 || j == 0 || j == boardHeight-1){ // if the box is on the edge\n                    BOARD[i][j].setWall(true); // sets the box to be a wall\n                }\n                if (i == boardWidth/2 && j == boardHeight/2){ // if the box is in the middle\n                    BOARD[i][j].setFruit(true); // sets the box to be a wall\n                }\n            }\n        }\n        SnakePart snakeStart = new SnakePart(INITIAL_SNAKE_X-INITIAL_SNAKE_LENGTH,INITIAL_SNAKE_Y,true, RIGHT); // creates a new SnakePart\n        BOARD[INITIAL_SNAKE_X][INITIAL_SNAKE_Y].setSnake(true); // sets the box to have a snake\n        s = new Snake(snakeStart); // creates a new Snake\n        s.setHead(snakeStart); // sets the head of the snake\n        s.setTail(snakeStart); // sets the tail of the snake\n        s.setCurrentDirection(RIGHT);\n        int x = INITIAL_SNAKE_X-INITIAL_SNAKE_LENGTH+1; // x coordinate of the next SnakePart\n        for (int i = 0; i<INITIAL_SNAKE_LENGTH; i++){ // for each SnakePart in the snake\n            s.addToSnake(x, INITIAL_SNAKE_Y, false, RIGHT); // adds a SnakePart to the snake\n            BOARD[x][INITIAL_SNAKE_Y].setSnake(true); // sets the box to have a snake\n            x++;\n        }\n        SnakePart sp = s.getTail(); // gets the tail of the snake\n        while (sp != null){ // while there are more SnakeParts\n            sp = sp.getFollower(); // move to the next SnakePart\n        }\n        this.setContentPane(panel); // sets the content pane to the panel\n        this.setTitle(\"Snake!\"); // sets title of Window to \"Snake!\"\n        //this.setPreferredSize(new Dimension(paneWidth,paneHeight)); //24+8 = 32, 8+8=16\n        //this.getContentPane().setBackground(new Color(0,0,0,0)); // sets the background colour of the window\n        this.getContentPane().setPreferredSize(new Dimension(paneWidth,paneHeight)); // sets the size of the window\n        this.setResizable(false); // stops the user from resizing the window\n        this.panel.setPreferredSize(new Dimension(paneWidth,paneHeight));\n        this.panel.setOpaque(false);\n        this.setUndecorated(false);\n\n        this.menuBar = new JMenuBar(); // makes a new menu bar\n        this.setJMenuBar(menuBar); // sets the menu bar to the window\n        createMenu(MENU0_OPTIONS, 0); // creates the menus\n        createMenu(MENU1_OPTIONS, 1);\n        createMenu(MENU2_OPTIONS, 2);\n        createMenu(MENU3_OPTIONS, 3);\n        this.myGraphic = new Canvas(); // initialises graphic\n        this.panel.add(myGraphic); // adds canvas to panel\n\n        this.setLayout(null);\n        this.setDefaultCloseOperation(EXIT_ON_CLOSE); // stops program when window is closed\n        this.pack(); // makes the window\n        this.toFront(); // puts this window on top of other windows the user might have open.\n        this.setLocationRelativeTo(null); // opens the window in the middle of the screen\n        this.setVisible(true); // makes the window visible\n\n        int xNum = this.getWidth()-paneWidth;\n        int yNum = this.getHeight()-paneHeight;\n        this.xOffset = xNum-8;\n        this.yOffset = yNum-8;\n        this.panel.repaint();\n\n        /* debug for offset*/\n//        pt(\"xn Yn         \"+xNum+\"  \"+yNum);\n//        pt(\"this.g W H    \"+this.getWidth()+\" \"+this.getHeight());\n//        pt(\"this.g cp W H \"+this.getContentPane().getWidth()+\" \"+this.getContentPane().getHeight());\n//        pt(\"pane W H      \"+paneWidth+\" \"+paneHeight);\n//        pt(\"menu bar W H  \"+this.menuBar.getWidth()+\" \"+this.menuBar.getHeight());\n//        pt(\"panel x y     \"+this.panel.getX()+\"   \"+this.panel.getY());\n//        pt(\"xoffst Yoffst \"+this.xOffset+\"   \"+this.yOffset);\n\n        addKeyListener(new KeyAdapter() {\n            public void keyPressed(KeyEvent e) {\n                pt(\"key key key key key \");\n                key(e);\n            }\n        });\n        turn();\n    }\n    public void pt(String s){\n        System.out.println(s);\n    }\n    public void key(KeyEvent e){\n        //if(firstKeyPressed){\n        //    firstKeyPressed = false;\n        //    turn();\n        //}\n        if (e.getKeyCode() == 38){ // key was 'up arrow' key\n            if (s.getCurrentDirection() != DOWN && !justTurned) {\n                s.setNextDirection(UP);\n                justTurned = true;\n            }\n        }\n        if (e.getKeyCode() == 40){ // key was 'down arrow' key\n            if(s.getCurrentDirection() != UP && !justTurned) {\n                s.setNextDirection(DOWN);\n                justTurned = true;\n            }\n        }\n        if (e.getKeyCode() == 39){ // key was 'right arrow' key\n            if(s.getCurrentDirection()!=LEFT && !justTurned) {\n                s.setNextDirection(RIGHT);\n                justTurned = true;\n            }\n        }\n        if (e.getKeyCode() == 37){ // key was 'left arrow' key\n            if(s.getCurrentDirection()!=RIGHT && !justTurned) {\n                s.setNextDirection(LEFT);\n                justTurned = true;\n            }\n        }\n    }\n    private void createMenu(String[] menuOptions, int numMenus) { // creates menus in window\n        JMenu menu = new JMenu(MENU_NAMES[numMenus]); // creates a new menu\n        menuBar.add(menu); // adds the menu to the menu bar\n\n        for (String o : menuOptions){ // for each option in the menu\n            menuItem = new JMenuItem(o); // creates a new menu item\n            switch (o){ // sets the accelerator for the menu item\n                case \"Instructions\" -> menuItem.setAccelerator(KeyStroke.getKeyStroke('i'));\n                case \"Pause\" -> menuItem.setAccelerator(KeyStroke.getKeyStroke('p'));\n            }\n            menuItem.addActionListener(this); // adds an action listener to the menu item\n            menu.add(menuItem); // adds the menu item to the menu\n        }\n    }\n    public void actionPerformed(ActionEvent e) { // when a menu item is clicked\n        String command = e.getActionCommand(); // gets the command of the menu item\n        switch (command){ // does something based on the command\n            case \"Instructions\" -> JOptionPane.showMessageDialog(this, \"Use the arrow keys to move the snake. Eat the food to grow. Don't hit the walls or yourself.\");\n            case \"Pause\" -> {\n                JOptionPane.showMessageDialog(this, \"Game is paused. Press 'p' to unpause.\");\n                pause(); // pauses the game\n            }\n        }\n    }\n    private void pause() { // pauses the game\n        while (true){ // infinite loop\n            if (kb.nextLine().equals(\"p\")){ // if the user types 'p'\n                break; // breaks the loop\n            }\n        }\n    }\n    private void fruitEaten(Snake s) { // when the snake eats a fruit\n        s.addToSnake(f.getX(),f.getY(), false, s.getCurrentDirection());\n        f.eaten(); // sets the fruit to 'eaten';\n        int x=randomNumber(0, boardWidth);\n        int y=randomNumber(0, boardHeight);\n        boolean good  = false;\n        while (!good){\n            if (BOARD[x][y].isSnake() || BOARD[x][y].isWall()){\n                x=randomNumber(0, boardWidth);\n                y=randomNumber(0, boardHeight);\n            } else {\n                good = true;\n            }\n        }\n        f = new Fruit(randomNumber(0, 2), x, y); // makes a new fruit\n        BOARD[x][y].setFruit(true); // sets the box to have a fruit\n        pt(\"new fruit x: \"+f.getX()+\"; y: \"+f.getY());\n        points = points+10;\n    }\n    public int randomNumber( int min, int max) { // generates a random number between min and max\n        int range = (max - min) + 1;\n        int num = (int)(Math.random() * range) + min;\n        return num;\n    }\n    public void turn(){\n        pt(\" \");\n        pt(\"turn \"+turnNumber);\n        turnNumber ++;\n        int nextHeadX  = s.getHead().getBoardX(); // gets the x coordinate of the head\n        int nextHeadY = s.getHead().getBoardY(); // gets the y coordinate of the head\n        int headD = s.getNextDirection(); // gets the direction of the head\n        //pt(\"head direction: \"+headD+\"; current x: \"+nextHeadX+\"; current y: \"+nextHeadY);\n        switch (headD) { // sets next y and next x based on the direction of the head\n            case UP -> nextHeadY--; // up\n            case DOWN -> nextHeadY++; // down\n            case RIGHT -> nextHeadX++; // right\n            case LEFT -> nextHeadX--; // left\n        }\n        //pt(\"head direction: \"+headD+\"; current x: \"+nextHeadX+\"; current y: \"+nextHeadY);\n\n        //pt(\"next x: \"+nextHeadX+\"; next y: \"+nextHeadY);\n\n        if (BOARD[nextHeadX][nextHeadY].isFruit()) { // if the snake head will be on a fruit\n            pt(\"fruitEaten(s)\");\n            justAte = true;\n            fruitEaten(s); // eats the fruit\n        } else if (BOARD[nextHeadX][nextHeadY].isWall()){ // if the Snake head is on a wall\n            pt(\"wall\");\n            lost(); // ends the game\n        }else if (BOARD[nextHeadX][nextHeadY].isSnake()){ // if the Snake head will be on another SnakePart\n            if (s.getTail().getBoardX() == nextHeadX && s.getTail().getBoardY() == nextHeadY){ // this is because when the tail moves it will no longer be in the way of the head\n            } else {\n                pt(\"snake hit snake, \"+nextHeadX+\" \"+nextHeadY);\n                lost(); // ends the game\n            }\n        }\n\n        if (s.getAlive()) { // if the snake is alive\n            SnakePart sp = s.getTail(); // gets the tail of the snake\n\n            while (sp != null) { // while there are more SnakePart\n                int x=sp.getBoardX();\n                int y=sp.getBoardY();\n                if(sp.isTail()){\n                    BOARD[sp.getBoardX()][sp.getBoardY()].setSnake(false); // sets the box to not have a snake\n                }\n                int currentD = sp.getDirection(); // gets the direction of the tail\n                switch (currentD) { // moves the SnakePart\n                    case UP -> {\n                        y--;\n                        //pt(\"up \"+y);\n                    }\n                    case DOWN -> {\n                        y++;\n                        //pt(\"down \"+y);\n                    }\n                    case RIGHT -> {\n                        x++;\n                        //pt(\"right \"+x);\n                    }\n                    case LEFT -> {\n                        x--;\n                        //pt(\"left \"+x);\n                    }\n                }\n\n                if (!justAte) {\n                    if (sp.getFollower() != null){\n                        int nextD = sp.getFollower().getDirection(); // gets the direction of the SnakePart that follows\n                        sp.setDirection(nextD); // sets the direction of the SnakePart\n                    }else if (sp.isHead()){\n                        sp.setDirection(s.getCurrentDirection());\n                    }\n                    sp.setBoardX(x); // sets the x coordinate of the SnakePart\n                    sp.setBoardY(y); // sets the y coordinate of the SnakePart\n                }\n                BOARD[sp.getBoardX()][sp.getBoardY()].setSnake(true); // sets the box to have a snake\n                sp = sp.getFollower(); // moves to the next SnakePart\n            }\n            pt(\"moved head to x: \"+s.getHead().getBoardX()+\" y: \"+s.getHead().getBoardY());\n            justAte = false;\n\n        }\n        pt(\"turn end\");\n        repaint();\n        try {\n            Thread.sleep((long) (frameRate));\n        } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n        }\n        turn();\n    }\n    public void lost(){\n        s.setAlive(false);\n        pt(\"lost\");\n        JOptionPane.showMessageDialog(this, \"You lost! You got \"+points+\" points.\");\n        System.exit(0);\n    }\n    private BufferedImage offScreenImage;\n    public void paint(Graphics g) { //paints the window\n        pt(\"paint\");\n        if(turnNumber == 1){\n            super.paint(g);\n        }\n\n        if (offScreenImage == null) {\n            offScreenImage = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);\n        }\n        Graphics2D g2 = (Graphics2D) offScreenImage.getGraphics();\n        g2.setColor(BACKGROUND_COLOR);\n        g2.fillRect(xOffset, yOffset, getWidth(), getHeight());\n\n        for(int i = 0; i < boardWidth; i++){ // for each box in the board\n            for(int j = 0; j < boardHeight; j++){\n                g2.setColor(DOT_COLOR); // sets the colour to dark green\n                g2.fillRect(i*PIXELS_PER_BOX+xOffset+3, j*PIXELS_PER_BOX+yOffset+3, 4, 4); // draws a dot\n                if (BOARD[i][j].isWall()){ // if the box is a wall\n                    g2.setColor(WALL_COLOR); // sets the colour to brown\n                    g2.fillRect(i*PIXELS_PER_BOX+xOffset, j*PIXELS_PER_BOX+yOffset, PIXELS_PER_BOX, PIXELS_PER_BOX); // draws the box\n                    //pt(\"wall\");\n                }\n                else if (BOARD[i][j].isFruit()){ // if the box is the fruit\n                    //pt(\"fruit\");\n                    switch (f.getType()){ // draws the fruit based on the type\n                        case \"Apple\" -> {\n                            //pt(\"apple\");\n                            APPLE.paintIcon(this, g2,fruitX(),fruitY());\n                        }\n                        case \"Orange\" -> {\n                            //pt(\"orange\");\n                            ORANGE.paintIcon(this, g2,fruitX(),fruitY());\n                        }\n//                       case \"Kiwifruit\" -> {\n//                           //pt(\"kiwifruit\");\n//                           KIWIFRUIT.paintIcon(this, g2,fruitX(),fruitY());\n//                       }\n                        case \"Plum\" -> {\n                            //pt(\"plum\");\n                            PLUM.paintIcon(this, g2,fruitX(),fruitY());\n                        }\n                        default -> pt(\"Something went wrong\");\n                    }\n                } else if (BOARD[i][j].isSnake()){ // if the box is a snake\n                    //pt(\"snake: \"+i+\" \"+j);\n                }\n            }\n        }\n        //draw Snake\n\n        SnakePart sp = this.s.getTail();\n        int lastDirection = sp.getDirection();\n        for (int i = 0; i < s.getLength(); i++) {\n            int x = sp.getBoardX() * PIXELS_PER_BOX + xOffset;\n            int y = sp.getBoardY() * PIXELS_PER_BOX + yOffset;\n            //pt(\"length: \"+s.getLength()+\"; head: \"+sp.isHead()+\"; tail: \"+sp.isTail() + \"; Board x: \"+sp.getBoardX() + \"; Board y: \"+sp.getBoardY() +\"; x coord: \"+x+\"; y coord: \"+y);\n            // figures out which icon to use based on the direction of the SnakePart\n            if (sp.isTail()) {\n                //pt(\"tail\");\n                switch (sp.getDirection()) {\n                    case UP -> U_SNAKE_TAIL.paintIcon(this, g2, x, y); // U\n                    case DOWN -> D_SNAKE_TAIL.paintIcon(this, g2, x, y); // D\n                    case RIGHT -> R_SNAKE_TAIL.paintIcon(this, g2, x, y); // R\n                    case LEFT -> L_SNAKE_TAIL.paintIcon(this, g2, x, y); // L\n                    default -> pt(\"tail direction error. Tail direction: \" + sp.getDirection());\n                }\n            } else if (sp.isHead()) {\n                //pt(\"head\");\n                switch (sp.getDirection()) {\n                    case UP -> U_SNAKE_HEAD.paintIcon(this, g2, x, y); // U\n                    case DOWN -> D_SNAKE_HEAD.paintIcon(this, g2, x, y); // D\n                    case RIGHT -> R_SNAKE_HEAD.paintIcon(this, g2, x, y); // R\n                    case LEFT -> L_SNAKE_HEAD.paintIcon(this, g2, x, y); // L\n                    default -> pt(\"head direction error. Head direction: \" + sp.getDirection());\n                }\n                if(justTurned){\n                    sp.setDirection(s.getNextDirection());\n                    s.setCurrentDirection(s.getNextDirection());\n                    justTurned = false;\n                }\n            } else {\n                //pt(\"body\");\n                // possible outcomes: UD, UL, UR, DL, DR, LR\n                //    U   D   L   R\n                // U [XX][UD][UL][UR]\n                // D [XX][XX][DL][DR]\n                // L [XX][XX][XX][LR]\n                // R [XX][XX][XX][XX]\n\n                switch (sp.getDirection()) {\n                    case UP -> {\n                        switch (-1 * lastDirection) { // where the snake came from (if it was going left it means it's coming from the right)\n                            case DOWN -> UD.paintIcon(this, g2, x, y); // UD\n                            case RIGHT -> UR.paintIcon(this, g2, x, y); // UR\n                            case LEFT -> UL.paintIcon(this, g2, x, y); // UL\n                            default -> pt(\"up body. Last direction: \" + lastDirection);\n                        }\n                    }\n                    case DOWN -> {\n                        switch (-1 * lastDirection) {\n                            case UP -> UD.paintIcon(this, g2, x, y); // UD\n                            case RIGHT -> DR.paintIcon(this, g2, x, y); // DR\n                            case LEFT -> DL.paintIcon(this, g2, x, y); // DL\n                            default -> pt(\"down body. Last direction: \" + lastDirection);\n                        }\n                    }\n                    case RIGHT -> {\n                        switch (-1 * lastDirection) {\n                            case UP -> UR.paintIcon(this, g2, x, y); // UR\n                            case DOWN -> DR.paintIcon(this, g2, x, y); // DR\n                            case LEFT -> RL.paintIcon(this, g2, x, y); // RL\n                            default -> pt(\"right body. Last direction: \" + lastDirection);\n                        }\n                    }\n                    case LEFT -> {\n                        switch (-1 * lastDirection) {\n                            case UP -> UL.paintIcon(this, g2, x, y); // UL\n                            case DOWN -> DL.paintIcon(this, g2, x, y); // DL\n                            case RIGHT -> RL.paintIcon(this, g2, x, y); // RL\n                            default -> pt(\"left body. Last direction: \" + lastDirection);\n                        } //  switch (-1 * lastDirection) {\n                    } // case -1 -> {\n                    default -> pt(\"body direction error. Body direction: \" + sp.getDirection());\n                } // switch (sp.getDirection()) {\n            } // else {\n            lastDirection = sp.getDirection(); // set the last direction to the current direction\n            sp = sp.getFollower(); // move to the next SnakePart\n        } // for (int i = 0; i < s.getLength(); i++) {\n\n        //for (int i=0; i<10; i++) {\n        //    imageLibrary[iteration%3][pipes[i].getFull].paintIcon(this, g2, pipes[i].getX(), pipes[i].getY());\n        //}\n\n        g.drawImage(offScreenImage, 0, 0, null);\n    } // public void paint(Graphics g) {\n    public int fruitX(){\n        return f.getX()*PIXELS_PER_BOX+xOffset;\n    } // returns the x coordinate of the fruit\n    public int fruitY(){\n        return f.getY()*PIXELS_PER_BOX+yOffset-1;\n    } // returns the y coordinate of the fruit\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision c34b1dada1269640677a93ac4197c3245646667f)
+++ b/src/Main.java	(date 1721441368560)
@@ -137,8 +137,10 @@
 
         int xNum = this.getWidth()-paneWidth;
         int yNum = this.getHeight()-paneHeight;
-        this.xOffset = xNum-8;
-        this.yOffset = yNum-8;
+        this.xOffset = 0;
+        this.yOffset = 49;
+        //this.xOffset = xNum-8;
+        //this.yOffset = yNum-8;
         this.panel.repaint();
 
         /* debug for offset*/
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"ee0a2173-176d-400d-bd49-b46cdcab95b0\" name=\"Changes\" comment=\"Snake can be controlled. fixed flickering, menus are now broken\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Fruit.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Fruit.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Main.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;giraffffffffffe&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">\n    <option name=\"selectedUrlAndAccountId\">\n      <UrlAndAccount>\n        <option name=\"accountId\" value=\"3d4e3119-b12d-4970-bd1a-fa5691f740f4\" />\n        <option name=\"url\" value=\"https://github.com/giraffffffffffe/Snake.git\" />\n      </UrlAndAccount>\n    </option>\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 0\n}</component>\n  <component name=\"ProjectId\" id=\"2fvhMkDouY8YaNAkaprv2FfMfOy\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;H:/CSC223/AnneCareySmithSubmission/intelliJProjectAnne&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"jdk-21.0.2-openjdk-21.0.2-4caba194b151-4f524021\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"ee0a2173-176d-400d-bd49-b46cdcab95b0\" name=\"Changes\" comment=\"\" />\n      <created>1714687415116</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1714687415116</updated>\n      <workItem from=\"1714687416213\" duration=\"1394000\" />\n      <workItem from=\"1714945900902\" duration=\"2809000\" />\n      <workItem from=\"1715221744157\" duration=\"2427000\" />\n      <workItem from=\"1715224194492\" duration=\"569000\" />\n      <workItem from=\"1715291784185\" duration=\"1819000\" />\n      <workItem from=\"1715551112163\" duration=\"2477000\" />\n      <workItem from=\"1715822320792\" duration=\"3315000\" />\n      <workItem from=\"1715896013329\" duration=\"3276000\" />\n      <workItem from=\"1716155111498\" duration=\"2897000\" />\n      <workItem from=\"1718238409357\" duration=\"5092000\" />\n      <workItem from=\"1718245282514\" duration=\"2542000\" />\n      <workItem from=\"1718315486149\" duration=\"2939000\" />\n      <workItem from=\"1718853540487\" duration=\"79000\" />\n      <workItem from=\"1718920232644\" duration=\"3054000\" />\n      <workItem from=\"1719447917569\" duration=\"4688000\" />\n      <workItem from=\"1720052931218\" duration=\"6237000\" />\n      <workItem from=\"1720129587368\" duration=\"2323000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Started working on GUI and make a Snake class\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1714948714146</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1714948714146</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"Window opens and there are menus\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1715224758135</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715224758135</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"Made panel non-resizable, added code for some menu items\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1715293679784</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715293679784</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"Made Fruit class and worked connecting everything\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1715553825087</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715553825087</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"changed a fruit and started working on the board\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1715829576765</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715829576765</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"added fruit files and continued working on the board. added outer walls to the board\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1715899337436</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1715899337436</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"Tried to fix x and y offset\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716155906297</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716155906297</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"Tried to fix x and y offset again\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716156636327</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716156636327</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"I think i fixed x and y offset\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1716433793448</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1716433793448</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"added rotated images for the snake.&#10;added print method&#10;added turn method\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1717973093414</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1717973093414</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"worked on turn method\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1718245323502</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1718245323502</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"tried to change redraw method to remove flickering. Didn't work\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1718248686339</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1718248686339</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"removed redaw method as it wasn't going to work.&#10;implemented buffered image. It only flickers some of the time now\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1718318269915</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1718318269915</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"It no longer crashes when the fruit is eaten. It doesn't make a new fruit though\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1718922687982</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1718922687982</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"started points\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1718923260507</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1718923260507</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"snake can move. I need a new snake head turning piece\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1719448931033</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1719448931033</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"I broke everything.&#10;(I tried to make the head nt change direction until it had turned but now you can't control it or eat the fruit. &#10;Also I had to comment out the lines about crashing into yourself because they were making you automatically lose)\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1719458306256</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1719458306256</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"worked on turn method. Snake can move and eat 1 fruit. cannot be controlled\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1720063291602</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1720063291602</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"Snake can be controlled. fixed flickering, menus are now broken\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1720130475590</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1720130475590</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"20\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Started working on GUI and make a Snake class\" />\n    <MESSAGE value=\"Window opens and there are menus\" />\n    <MESSAGE value=\"Made panel non-resizable, added code for some menu items\" />\n    <MESSAGE value=\"Made Fruit class and worked connecting everything\" />\n    <MESSAGE value=\"changed a fruit and started working on the board\" />\n    <MESSAGE value=\"added fruit files and continued working on the board. added outer walls to the board\" />\n    <MESSAGE value=\"Tried to fix x and y offset\" />\n    <MESSAGE value=\"Tried to fix x and y offset again\" />\n    <MESSAGE value=\"I think i fixed x and y offset\" />\n    <MESSAGE value=\"added rotated images for the snake.&#10;added print method&#10;added turn method\" />\n    <MESSAGE value=\"worked on turn method\" />\n    <MESSAGE value=\"tried to change redraw method to remove flickering. Didn't work\" />\n    <MESSAGE value=\"removed redaw method as it wasn't going to work.&#10;implemented buffered image. It only flickers some of the time now\" />\n    <MESSAGE value=\"It no longer crashes when the fruit is eaten. It doesn't make a new fruit though\" />\n    <MESSAGE value=\"started points\" />\n    <MESSAGE value=\"snake can move. I need a new snake head turning piece\" />\n    <MESSAGE value=\"I broke everything.&#10;(I tried to make the head nt change direction until it had turned but now you can't control it or eat the fruit. &#10;Also I had to comment out the lines about crashing into yourself because they were making you automatically lose)\" />\n    <MESSAGE value=\"worked on turn method. Snake can move and eat 1 fruit. cannot be controlled\" />\n    <MESSAGE value=\"Snake can be controlled. fixed flickering, menus are now broken\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Snake can be controlled. fixed flickering, menus are now broken\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c34b1dada1269640677a93ac4197c3245646667f)
+++ b/.idea/workspace.xml	(date 1721635607521)
@@ -4,9 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="ee0a2173-176d-400d-bd49-b46cdcab95b0" name="Changes" comment="Snake can be controlled. fixed flickering, menus are now broken">
+    <list default="true" id="ee0a2173-176d-400d-bd49-b46cdcab95b0" name="Changes" comment="I think i fixed x and y offset">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/Fruit.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Fruit.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -55,7 +55,7 @@
     &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
     &quot;git-widget-placeholder&quot;: &quot;master&quot;,
     &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;H:/CSC223/AnneCareySmithSubmission/intelliJProjectAnne&quot;,
+    &quot;last_opened_file_path&quot;: &quot;H:/CSC335/finalProject/Snake&quot;,
     &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
     &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
     &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
@@ -89,14 +89,6 @@
       <workItem from="1715822320792" duration="3315000" />
       <workItem from="1715896013329" duration="3276000" />
       <workItem from="1716155111498" duration="2897000" />
-      <workItem from="1718238409357" duration="5092000" />
-      <workItem from="1718245282514" duration="2542000" />
-      <workItem from="1718315486149" duration="2939000" />
-      <workItem from="1718853540487" duration="79000" />
-      <workItem from="1718920232644" duration="3054000" />
-      <workItem from="1719447917569" duration="4688000" />
-      <workItem from="1720052931218" duration="6237000" />
-      <workItem from="1720129587368" duration="2323000" />
     </task>
     <task id="LOCAL-00001" summary="Started working on GUI and make a Snake class">
       <option name="closed" value="true" />
@@ -170,87 +162,7 @@
       <option name="project" value="LOCAL" />
       <updated>1716433793448</updated>
     </task>
-    <task id="LOCAL-00010" summary="added rotated images for the snake.&#10;added print method&#10;added turn method">
-      <option name="closed" value="true" />
-      <created>1717973093414</created>
-      <option name="number" value="00010" />
-      <option name="presentableId" value="LOCAL-00010" />
-      <option name="project" value="LOCAL" />
-      <updated>1717973093414</updated>
-    </task>
-    <task id="LOCAL-00011" summary="worked on turn method">
-      <option name="closed" value="true" />
-      <created>1718245323502</created>
-      <option name="number" value="00011" />
-      <option name="presentableId" value="LOCAL-00011" />
-      <option name="project" value="LOCAL" />
-      <updated>1718245323502</updated>
-    </task>
-    <task id="LOCAL-00012" summary="tried to change redraw method to remove flickering. Didn't work">
-      <option name="closed" value="true" />
-      <created>1718248686339</created>
-      <option name="number" value="00012" />
-      <option name="presentableId" value="LOCAL-00012" />
-      <option name="project" value="LOCAL" />
-      <updated>1718248686339</updated>
-    </task>
-    <task id="LOCAL-00013" summary="removed redaw method as it wasn't going to work.&#10;implemented buffered image. It only flickers some of the time now">
-      <option name="closed" value="true" />
-      <created>1718318269915</created>
-      <option name="number" value="00013" />
-      <option name="presentableId" value="LOCAL-00013" />
-      <option name="project" value="LOCAL" />
-      <updated>1718318269915</updated>
-    </task>
-    <task id="LOCAL-00014" summary="It no longer crashes when the fruit is eaten. It doesn't make a new fruit though">
-      <option name="closed" value="true" />
-      <created>1718922687982</created>
-      <option name="number" value="00014" />
-      <option name="presentableId" value="LOCAL-00014" />
-      <option name="project" value="LOCAL" />
-      <updated>1718922687982</updated>
-    </task>
-    <task id="LOCAL-00015" summary="started points">
-      <option name="closed" value="true" />
-      <created>1718923260507</created>
-      <option name="number" value="00015" />
-      <option name="presentableId" value="LOCAL-00015" />
-      <option name="project" value="LOCAL" />
-      <updated>1718923260507</updated>
-    </task>
-    <task id="LOCAL-00016" summary="snake can move. I need a new snake head turning piece">
-      <option name="closed" value="true" />
-      <created>1719448931033</created>
-      <option name="number" value="00016" />
-      <option name="presentableId" value="LOCAL-00016" />
-      <option name="project" value="LOCAL" />
-      <updated>1719448931033</updated>
-    </task>
-    <task id="LOCAL-00017" summary="I broke everything.&#10;(I tried to make the head nt change direction until it had turned but now you can't control it or eat the fruit. &#10;Also I had to comment out the lines about crashing into yourself because they were making you automatically lose)">
-      <option name="closed" value="true" />
-      <created>1719458306256</created>
-      <option name="number" value="00017" />
-      <option name="presentableId" value="LOCAL-00017" />
-      <option name="project" value="LOCAL" />
-      <updated>1719458306256</updated>
-    </task>
-    <task id="LOCAL-00018" summary="worked on turn method. Snake can move and eat 1 fruit. cannot be controlled">
-      <option name="closed" value="true" />
-      <created>1720063291602</created>
-      <option name="number" value="00018" />
-      <option name="presentableId" value="LOCAL-00018" />
-      <option name="project" value="LOCAL" />
-      <updated>1720063291602</updated>
-    </task>
-    <task id="LOCAL-00019" summary="Snake can be controlled. fixed flickering, menus are now broken">
-      <option name="closed" value="true" />
-      <created>1720130475590</created>
-      <option name="number" value="00019" />
-      <option name="presentableId" value="LOCAL-00019" />
-      <option name="project" value="LOCAL" />
-      <updated>1720130475590</updated>
-    </task>
-    <option name="localTasksCounter" value="20" />
+    <option name="localTasksCounter" value="10" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -277,16 +189,6 @@
     <MESSAGE value="Tried to fix x and y offset" />
     <MESSAGE value="Tried to fix x and y offset again" />
     <MESSAGE value="I think i fixed x and y offset" />
-    <MESSAGE value="added rotated images for the snake.&#10;added print method&#10;added turn method" />
-    <MESSAGE value="worked on turn method" />
-    <MESSAGE value="tried to change redraw method to remove flickering. Didn't work" />
-    <MESSAGE value="removed redaw method as it wasn't going to work.&#10;implemented buffered image. It only flickers some of the time now" />
-    <MESSAGE value="It no longer crashes when the fruit is eaten. It doesn't make a new fruit though" />
-    <MESSAGE value="started points" />
-    <MESSAGE value="snake can move. I need a new snake head turning piece" />
-    <MESSAGE value="I broke everything.&#10;(I tried to make the head nt change direction until it had turned but now you can't control it or eat the fruit. &#10;Also I had to comment out the lines about crashing into yourself because they were making you automatically lose)" />
-    <MESSAGE value="worked on turn method. Snake can move and eat 1 fruit. cannot be controlled" />
-    <MESSAGE value="Snake can be controlled. fixed flickering, menus are now broken" />
-    <option name="LAST_COMMIT_MESSAGE" value="Snake can be controlled. fixed flickering, menus are now broken" />
+    <option name="LAST_COMMIT_MESSAGE" value="I think i fixed x and y offset" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision c34b1dada1269640677a93ac4197c3245646667f)
+++ b/.idea/misc.xml	(date 1721438437224)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
